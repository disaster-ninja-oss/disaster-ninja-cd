apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.envName }}-layers-api
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: layers-api
    app.kubernetes.io/instance: {{ .Values.envName }}-layers-api
    app.kubernetes.io/managed-by: "Helm"
    stage: {{ .Values.envName }}
  annotations:
    meta.helm.sh/release-name: {{ .Release.Name }}
    meta.helm.sh/release-namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: layers-api
      app.kubernetes.io/instance: {{ .Values.envName }}-layers-api
      app.kubernetes.io/managed-by: "Helm"
      stage: {{ .Values.envName }}
  replicas: {{ .Values.replicas }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: layers-api
        app.kubernetes.io/instance: {{ .Values.envName }}-layers-api
        app.kubernetes.io/managed-by: "Helm"
        stage: {{ .Values.envName }}
      annotations:
        meta.helm.sh/release-name: {{ .Release.Name }}
        meta.helm.sh/release-namespace: {{ .Release.Namespace }}
        #only roll pods if config (rendered!) changed
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
    spec:
      {{ if .Values.image.usePullSecret }}
      imagePullSecrets: #TODO remove once image is on ghcr.io
        - name: {{ .Values.image.pullSecretName }}{{ end }}
      shareProcessNamespace: true
      containers:
        - name: layers-api
          image: {{ .Values.image.name }}:{{ .Values.image.tag }}
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: {{ .Values.port }}
              name: main
          resources:
            requests:
              cpu: {{ .Values.resources.requests.cpu | quote }}
              memory: {{ .Values.resources.requests.memory | quote }}
            limits:
              #TODO cpu
              memory: {{ .Values.resources.limits.memory | quote }}
          env:
            - name: JAVA_TOOL_OPTIONS
              value: "-XX:MaxRAMPercentage=50"
            - name: OTEL_SERVICE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/instance']
            - name: MY_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
              value: "http://$(MY_NODE_NAME):{{ .Values.otlpTracesPort }}"
          envFrom:
            - configMapRef:
                name: {{ .Values.envName }}-layers-api
            - secretRef:
                name: {{ .Values.envName }}-layers-api
          readinessProbe:
            httpGet:
              path: /layers/v2/health/readiness
              port: {{ .Values.port }}
            failureThreshold: 1
            periodSeconds: 15
            initialDelaySeconds: {{ .Values.probeInitialDelaySeconds }}
          {{ if .Values.createResource.deploymentLivenessProbe }}
          livenessProbe:
            httpGet:
              path: /layers/v2/health/readiness
              port: {{ .Values.port }}
            failureThreshold: 10
            periodSeconds: 15
            initialDelaySeconds: {{ .Values.probeInitialDelaySeconds }}
          {{ end }}
          securityContext:
            capabilities:
              add:
                - SYS_PTRACE
